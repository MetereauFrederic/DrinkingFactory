/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.fsm;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class FSMStatemachine implements IFSMStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private SCInterfaceOperationCallback operationCallback;
		
		public synchronized void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean b_drink;
		
		
		public void raiseB_drink() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							b_drink = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean s_Slide;
		
		
		public void raiseS_Slide() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							s_Slide = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean b_option;
		
		
		public void raiseB_option() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							b_option = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean c_coin;
		
		
		public void raiseC_coin() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							c_coin = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean c_NFC;
		
		
		public void raiseC_NFC() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							c_NFC = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean b_Cancel;
		
		
		public void raiseB_Cancel() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							b_Cancel = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cup_Taken;
		
		
		public void raiseCup_Taken() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cup_Taken = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean b_Cup;
		
		
		public void raiseB_Cup() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							b_Cup = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancel;
		
		
		public boolean isRaisedCancel() {
			synchronized(FSMStatemachine.this) {
				return cancel;
			}
		}
		
		protected void raiseCancel() {
			synchronized(FSMStatemachine.this) {
				cancel = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCancelRaised();
				}
			}
		}
		
		private boolean reset;
		
		
		public boolean isRaisedReset() {
			synchronized(FSMStatemachine.this) {
				return reset;
			}
		}
		
		protected void raiseReset() {
			synchronized(FSMStatemachine.this) {
				reset = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onResetRaised();
				}
			}
		}
		
		private boolean preparing;
		
		
		public boolean isRaisedPreparing() {
			synchronized(FSMStatemachine.this) {
				return preparing;
			}
		}
		
		protected void raisePreparing() {
			synchronized(FSMStatemachine.this) {
				preparing = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPreparingRaised();
				}
			}
		}
		
		private boolean coffeePod;
		
		
		public boolean isRaisedCoffeePod() {
			synchronized(FSMStatemachine.this) {
				return coffeePod;
			}
		}
		
		protected void raiseCoffeePod() {
			synchronized(FSMStatemachine.this) {
				coffeePod = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCoffeePodRaised();
				}
			}
		}
		
		private boolean endCoffeePod;
		
		
		public boolean isRaisedEndCoffeePod() {
			synchronized(FSMStatemachine.this) {
				return endCoffeePod;
			}
		}
		
		protected void raiseEndCoffeePod() {
			synchronized(FSMStatemachine.this) {
				endCoffeePod = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndCoffeePodRaised();
				}
			}
		}
		
		private boolean crushing;
		
		
		public boolean isRaisedCrushing() {
			synchronized(FSMStatemachine.this) {
				return crushing;
			}
		}
		
		protected void raiseCrushing() {
			synchronized(FSMStatemachine.this) {
				crushing = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCrushingRaised();
				}
			}
		}
		
		private boolean endCrushing;
		
		
		public boolean isRaisedEndCrushing() {
			synchronized(FSMStatemachine.this) {
				return endCrushing;
			}
		}
		
		protected void raiseEndCrushing() {
			synchronized(FSMStatemachine.this) {
				endCrushing = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndCrushingRaised();
				}
			}
		}
		
		private boolean tamping;
		
		
		public boolean isRaisedTamping() {
			synchronized(FSMStatemachine.this) {
				return tamping;
			}
		}
		
		protected void raiseTamping() {
			synchronized(FSMStatemachine.this) {
				tamping = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTampingRaised();
				}
			}
		}
		
		private boolean endTamping;
		
		
		public boolean isRaisedEndTamping() {
			synchronized(FSMStatemachine.this) {
				return endTamping;
			}
		}
		
		protected void raiseEndTamping() {
			synchronized(FSMStatemachine.this) {
				endTamping = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndTampingRaised();
				}
			}
		}
		
		private boolean heating;
		
		
		public boolean isRaisedHeating() {
			synchronized(FSMStatemachine.this) {
				return heating;
			}
		}
		
		protected void raiseHeating() {
			synchronized(FSMStatemachine.this) {
				heating = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onHeatingRaised();
				}
			}
		}
		
		private boolean endHeating;
		
		
		public boolean isRaisedEndHeating() {
			synchronized(FSMStatemachine.this) {
				return endHeating;
			}
		}
		
		protected void raiseEndHeating() {
			synchronized(FSMStatemachine.this) {
				endHeating = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndHeatingRaised();
				}
			}
		}
		
		private boolean placingCup;
		
		
		public boolean isRaisedPlacingCup() {
			synchronized(FSMStatemachine.this) {
				return placingCup;
			}
		}
		
		protected void raisePlacingCup() {
			synchronized(FSMStatemachine.this) {
				placingCup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPlacingCupRaised();
				}
			}
		}
		
		private boolean endPlacingCup;
		
		
		public boolean isRaisedEndPlacingCup() {
			synchronized(FSMStatemachine.this) {
				return endPlacingCup;
			}
		}
		
		protected void raiseEndPlacingCup() {
			synchronized(FSMStatemachine.this) {
				endPlacingCup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndPlacingCupRaised();
				}
			}
		}
		
		private boolean pouringWater;
		
		
		public boolean isRaisedPouringWater() {
			synchronized(FSMStatemachine.this) {
				return pouringWater;
			}
		}
		
		protected void raisePouringWater() {
			synchronized(FSMStatemachine.this) {
				pouringWater = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPouringWaterRaised();
				}
			}
		}
		
		private boolean endPouringWater;
		
		
		public boolean isRaisedEndPouringWater() {
			synchronized(FSMStatemachine.this) {
				return endPouringWater;
			}
		}
		
		protected void raiseEndPouringWater() {
			synchronized(FSMStatemachine.this) {
				endPouringWater = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndPouringWaterRaised();
				}
			}
		}
		
		private boolean pouringSugar;
		
		
		public boolean isRaisedPouringSugar() {
			synchronized(FSMStatemachine.this) {
				return pouringSugar;
			}
		}
		
		protected void raisePouringSugar() {
			synchronized(FSMStatemachine.this) {
				pouringSugar = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPouringSugarRaised();
				}
			}
		}
		
		private boolean endPouringSugar;
		
		
		public boolean isRaisedEndPouringSugar() {
			synchronized(FSMStatemachine.this) {
				return endPouringSugar;
			}
		}
		
		protected void raiseEndPouringSugar() {
			synchronized(FSMStatemachine.this) {
				endPouringSugar = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndPouringSugarRaised();
				}
			}
		}
		
		private boolean infusing;
		
		
		public boolean isRaisedInfusing() {
			synchronized(FSMStatemachine.this) {
				return infusing;
			}
		}
		
		protected void raiseInfusing() {
			synchronized(FSMStatemachine.this) {
				infusing = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onInfusingRaised();
				}
			}
		}
		
		private boolean endInfusing;
		
		
		public boolean isRaisedEndInfusing() {
			synchronized(FSMStatemachine.this) {
				return endInfusing;
			}
		}
		
		protected void raiseEndInfusing() {
			synchronized(FSMStatemachine.this) {
				endInfusing = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndInfusingRaised();
				}
			}
		}
		
		private boolean removingBag;
		
		
		public boolean isRaisedRemovingBag() {
			synchronized(FSMStatemachine.this) {
				return removingBag;
			}
		}
		
		protected void raiseRemovingBag() {
			synchronized(FSMStatemachine.this) {
				removingBag = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onRemovingBagRaised();
				}
			}
		}
		
		private boolean endRemovingBag;
		
		
		public boolean isRaisedEndRemovingBag() {
			synchronized(FSMStatemachine.this) {
				return endRemovingBag;
			}
		}
		
		protected void raiseEndRemovingBag() {
			synchronized(FSMStatemachine.this) {
				endRemovingBag = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndRemovingBagRaised();
				}
			}
		}
		
		private boolean puttingTea;
		
		
		public boolean isRaisedPuttingTea() {
			synchronized(FSMStatemachine.this) {
				return puttingTea;
			}
		}
		
		protected void raisePuttingTea() {
			synchronized(FSMStatemachine.this) {
				puttingTea = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPuttingTeaRaised();
				}
			}
		}
		
		private boolean endPuttingTea;
		
		
		public boolean isRaisedEndPuttingTea() {
			synchronized(FSMStatemachine.this) {
				return endPuttingTea;
			}
		}
		
		protected void raiseEndPuttingTea() {
			synchronized(FSMStatemachine.this) {
				endPuttingTea = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndPuttingTeaRaised();
				}
			}
		}
		
		private boolean drinkReady;
		
		
		public boolean isRaisedDrinkReady() {
			synchronized(FSMStatemachine.this) {
				return drinkReady;
			}
		}
		
		protected void raiseDrinkReady() {
			synchronized(FSMStatemachine.this) {
				drinkReady = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDrinkReadyRaised();
				}
			}
		}
		
		private boolean cleanning;
		
		
		public boolean isRaisedCleanning() {
			synchronized(FSMStatemachine.this) {
				return cleanning;
			}
		}
		
		protected void raiseCleanning() {
			synchronized(FSMStatemachine.this) {
				cleanning = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCleanningRaised();
				}
			}
		}
		
		private boolean endCleanning;
		
		
		public boolean isRaisedEndCleanning() {
			synchronized(FSMStatemachine.this) {
				return endCleanning;
			}
		}
		
		protected void raiseEndCleanning() {
			synchronized(FSMStatemachine.this) {
				endCleanning = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndCleanningRaised();
				}
			}
		}
		
		private boolean progressBar;
		
		
		public boolean isRaisedProgressBar() {
			synchronized(FSMStatemachine.this) {
				return progressBar;
			}
		}
		
		protected void raiseProgressBar() {
			synchronized(FSMStatemachine.this) {
				progressBar = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onProgressBarRaised();
				}
			}
		}
		
		private boolean pouringMapleSyrup;
		
		
		public boolean isRaisedPouringMapleSyrup() {
			synchronized(FSMStatemachine.this) {
				return pouringMapleSyrup;
			}
		}
		
		protected void raisePouringMapleSyrup() {
			synchronized(FSMStatemachine.this) {
				pouringMapleSyrup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPouringMapleSyrupRaised();
				}
			}
		}
		
		private boolean endPouringMapleSyrup;
		
		
		public boolean isRaisedEndPouringMapleSyrup() {
			synchronized(FSMStatemachine.this) {
				return endPouringMapleSyrup;
			}
		}
		
		protected void raiseEndPouringMapleSyrup() {
			synchronized(FSMStatemachine.this) {
				endPouringMapleSyrup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndPouringMapleSyrupRaised();
				}
			}
		}
		
		private boolean pouringSoup;
		
		
		public boolean isRaisedPouringSoup() {
			synchronized(FSMStatemachine.this) {
				return pouringSoup;
			}
		}
		
		protected void raisePouringSoup() {
			synchronized(FSMStatemachine.this) {
				pouringSoup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPouringSoupRaised();
				}
			}
		}
		
		private boolean pouringSpice;
		
		
		public boolean isRaisedPouringSpice() {
			synchronized(FSMStatemachine.this) {
				return pouringSpice;
			}
		}
		
		protected void raisePouringSpice() {
			synchronized(FSMStatemachine.this) {
				pouringSpice = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPouringSpiceRaised();
				}
			}
		}
		
		private boolean endPouringSpice;
		
		
		public boolean isRaisedEndPouringSpice() {
			synchronized(FSMStatemachine.this) {
				return endPouringSpice;
			}
		}
		
		protected void raiseEndPouringSpice() {
			synchronized(FSMStatemachine.this) {
				endPouringSpice = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndPouringSpiceRaised();
				}
			}
		}
		
		private boolean pouringCroutons;
		
		
		public boolean isRaisedPouringCroutons() {
			synchronized(FSMStatemachine.this) {
				return pouringCroutons;
			}
		}
		
		protected void raisePouringCroutons() {
			synchronized(FSMStatemachine.this) {
				pouringCroutons = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPouringCroutonsRaised();
				}
			}
		}
		
		private boolean endPouringCroutons;
		
		
		public boolean isRaisedEndPouringCroutons() {
			synchronized(FSMStatemachine.this) {
				return endPouringCroutons;
			}
		}
		
		protected void raiseEndPouringCroutons() {
			synchronized(FSMStatemachine.this) {
				endPouringCroutons = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndPouringCroutonsRaised();
				}
			}
		}
		
		private boolean pouringVanilla;
		
		
		public boolean isRaisedPouringVanilla() {
			synchronized(FSMStatemachine.this) {
				return pouringVanilla;
			}
		}
		
		protected void raisePouringVanilla() {
			synchronized(FSMStatemachine.this) {
				pouringVanilla = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPouringVanillaRaised();
				}
			}
		}
		
		private boolean mixVanilla;
		
		
		public boolean isRaisedMixVanilla() {
			synchronized(FSMStatemachine.this) {
				return mixVanilla;
			}
		}
		
		protected void raiseMixVanilla() {
			synchronized(FSMStatemachine.this) {
				mixVanilla = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onMixVanillaRaised();
				}
			}
		}
		
		private boolean endVanilla;
		
		
		public boolean isRaisedEndVanilla() {
			synchronized(FSMStatemachine.this) {
				return endVanilla;
			}
		}
		
		protected void raiseEndVanilla() {
			synchronized(FSMStatemachine.this) {
				endVanilla = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndVanillaRaised();
				}
			}
		}
		
		private boolean pouringMilkCloud;
		
		
		public boolean isRaisedPouringMilkCloud() {
			synchronized(FSMStatemachine.this) {
				return pouringMilkCloud;
			}
		}
		
		protected void raisePouringMilkCloud() {
			synchronized(FSMStatemachine.this) {
				pouringMilkCloud = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPouringMilkCloudRaised();
				}
			}
		}
		
		private boolean endMilkCloud;
		
		
		public boolean isRaisedEndMilkCloud() {
			synchronized(FSMStatemachine.this) {
				return endMilkCloud;
			}
		}
		
		protected void raiseEndMilkCloud() {
			synchronized(FSMStatemachine.this) {
				endMilkCloud = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndMilkCloudRaised();
				}
			}
		}
		
		private boolean nitrogen;
		
		
		public boolean isRaisedNitrogen() {
			synchronized(FSMStatemachine.this) {
				return nitrogen;
			}
		}
		
		protected void raiseNitrogen() {
			synchronized(FSMStatemachine.this) {
				nitrogen = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onNitrogenRaised();
				}
			}
		}
		
		private boolean endNitrogen;
		
		
		public boolean isRaisedEndNitrogen() {
			synchronized(FSMStatemachine.this) {
				return endNitrogen;
			}
		}
		
		protected void raiseEndNitrogen() {
			synchronized(FSMStatemachine.this) {
				endNitrogen = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onEndNitrogenRaised();
				}
			}
		}
		
		private boolean aCup;
		
		
		public boolean isRaisedACup() {
			synchronized(FSMStatemachine.this) {
				return aCup;
			}
		}
		
		protected void raiseACup() {
			synchronized(FSMStatemachine.this) {
				aCup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onACupRaised();
				}
			}
		}
		
		private long price;
		
		public synchronized long getPrice() {
			synchronized(FSMStatemachine.this) {
				return price;
			}
		}
		
		public void setPrice(long value) {
			synchronized(FSMStatemachine.this) {
				this.price = value;
			}
		}
		
		private long money;
		
		public synchronized long getMoney() {
			synchronized(FSMStatemachine.this) {
				return money;
			}
		}
		
		public void setMoney(long value) {
			synchronized(FSMStatemachine.this) {
				this.money = value;
			}
		}
		
		private boolean water;
		
		public synchronized boolean getWater() {
			synchronized(FSMStatemachine.this) {
				return water;
			}
		}
		
		public void setWater(boolean value) {
			synchronized(FSMStatemachine.this) {
				this.water = value;
			}
		}
		
		private boolean sugar;
		
		public synchronized boolean getSugar() {
			synchronized(FSMStatemachine.this) {
				return sugar;
			}
		}
		
		public void setSugar(boolean value) {
			synchronized(FSMStatemachine.this) {
				this.sugar = value;
			}
		}
		
		private long aPercent;
		
		public synchronized long getAPercent() {
			synchronized(FSMStatemachine.this) {
				return aPercent;
			}
		}
		
		public void setAPercent(long value) {
			synchronized(FSMStatemachine.this) {
				this.aPercent = value;
			}
		}
		
		private boolean cupIsTaken;
		
		public synchronized boolean getCupIsTaken() {
			synchronized(FSMStatemachine.this) {
				return cupIsTaken;
			}
		}
		
		public void setCupIsTaken(boolean value) {
			synchronized(FSMStatemachine.this) {
				this.cupIsTaken = value;
			}
		}
		
		private boolean cleanIsDone;
		
		public synchronized boolean getCleanIsDone() {
			synchronized(FSMStatemachine.this) {
				return cleanIsDone;
			}
		}
		
		public void setCleanIsDone(boolean value) {
			synchronized(FSMStatemachine.this) {
				this.cleanIsDone = value;
			}
		}
		
		private boolean cup;
		
		public synchronized boolean getCup() {
			synchronized(FSMStatemachine.this) {
				return cup;
			}
		}
		
		public void setCup(boolean value) {
			synchronized(FSMStatemachine.this) {
				this.cup = value;
			}
		}
		
		protected void clearEvents() {
			b_drink = false;
			s_Slide = false;
			b_option = false;
			c_coin = false;
			c_NFC = false;
			b_Cancel = false;
			cup_Taken = false;
			b_Cup = false;
		}
		protected void clearOutEvents() {
		
		cancel = false;
		reset = false;
		preparing = false;
		coffeePod = false;
		endCoffeePod = false;
		crushing = false;
		endCrushing = false;
		tamping = false;
		endTamping = false;
		heating = false;
		endHeating = false;
		placingCup = false;
		endPlacingCup = false;
		pouringWater = false;
		endPouringWater = false;
		pouringSugar = false;
		endPouringSugar = false;
		infusing = false;
		endInfusing = false;
		removingBag = false;
		endRemovingBag = false;
		puttingTea = false;
		endPuttingTea = false;
		drinkReady = false;
		cleanning = false;
		endCleanning = false;
		progressBar = false;
		pouringMapleSyrup = false;
		endPouringMapleSyrup = false;
		pouringSoup = false;
		pouringSpice = false;
		endPouringSpice = false;
		pouringCroutons = false;
		endPouringCroutons = false;
		pouringVanilla = false;
		mixVanilla = false;
		endVanilla = false;
		pouringMilkCloud = false;
		endMilkCloud = false;
		nitrogen = false;
		endNitrogen = false;
		aCup = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		machine_Order,
		machine_Order_Select_Drink_select,
		machine_Order_Select_Drink_select_Selecting_Chosen,
		machine_Order_Select_Drink_select_Selecting_Waiting,
		machine_Order_Option_Waiting,
		machine_Order_Payment_Waiting,
		machine_Order_Time_Waiting,
		machine_Order_Time_Running,
		machine_Order_Cup_Cup,
		machine_Order_Cup_Waiting,
		machine_Serving,
		machine_Serving_Serving_Heating_and_Cup,
		machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp,
		machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod,
		machine_Serving_Serving_Heating_and_Cup_coffee_exit,
		machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing,
		machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping,
		machine_Serving_Serving_Heating_and_Cup_expresso_exit,
		machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup,
		machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag,
		machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit,
		machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup,
		machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices,
		machine_Serving_Serving_Water_and_Sugar,
		machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water,
		machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar,
		machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup,
		machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons,
		machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing,
		machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting,
		machine_Serving_Serving_Infusing,
		machine_Serving_Serving_Remove_bag,
		machine_Serving_Serving_Waiting,
		machine_Serving_Serving_Pouring_Vanilla,
		machine_Serving_Serving_Mix_Vanilla,
		machine_Serving_Serving_MilkCloud,
		machine_Serving_Serving_nitrogen_injection,
		machine_cleaning,
		$NullState$
	};
	
	private final State[] stateVector = new State[5];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[22];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	private boolean startTimer;
	private boolean accept;
	private boolean clean;
	private boolean newOrder;
	public FSMStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 5; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setPrice(0);
		
		sCInterface.setMoney(0);
		
		sCInterface.setWater(false);
		
		sCInterface.setSugar(false);
		
		sCInterface.setAPercent(0);
		
		sCInterface.setCupIsTaken(false);
		
		sCInterface.setCleanIsDone(false);
		
		sCInterface.setCup(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_Machine_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case machine_Order_Select_Drink_select_Selecting_Chosen:
				machine_Order_Select_Drink_select_Selecting_Chosen_react(true);
				break;
			case machine_Order_Select_Drink_select_Selecting_Waiting:
				machine_Order_Select_Drink_select_Selecting_Waiting_react(true);
				break;
			case machine_Order_Option_Waiting:
				machine_Order_Option_Waiting_react(true);
				break;
			case machine_Order_Payment_Waiting:
				machine_Order_Payment_Waiting_react(true);
				break;
			case machine_Order_Time_Waiting:
				machine_Order_Time_Waiting_react(true);
				break;
			case machine_Order_Time_Running:
				machine_Order_Time_Running_react(true);
				break;
			case machine_Order_Cup_Cup:
				machine_Order_Cup_Cup_react(true);
				break;
			case machine_Order_Cup_Waiting:
				machine_Order_Cup_Waiting_react(true);
				break;
			case machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp:
				machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp_react(true);
				break;
			case machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod:
				machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod_react(true);
				break;
			case machine_Serving_Serving_Heating_and_Cup_coffee_exit:
				machine_Serving_Serving_Heating_and_Cup_coffee_exit_react(true);
				break;
			case machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing:
				machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing_react(true);
				break;
			case machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping:
				machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping_react(true);
				break;
			case machine_Serving_Serving_Heating_and_Cup_expresso_exit:
				machine_Serving_Serving_Heating_and_Cup_expresso_exit_react(true);
				break;
			case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup:
				machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup_react(true);
				break;
			case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag:
				machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag_react(true);
				break;
			case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit:
				machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit_react(true);
				break;
			case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup:
				machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup_react(true);
				break;
			case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices:
				machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices_react(true);
				break;
			case machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water:
				machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water_react(true);
				break;
			case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar:
				machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar_react(true);
				break;
			case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup:
				machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup_react(true);
				break;
			case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons:
				machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons_react(true);
				break;
			case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing:
				machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing_react(true);
				break;
			case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting:
				machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting_react(true);
				break;
			case machine_Serving_Serving_Infusing:
				machine_Serving_Serving_Infusing_react(true);
				break;
			case machine_Serving_Serving_Remove_bag:
				machine_Serving_Serving_Remove_bag_react(true);
				break;
			case machine_Serving_Serving_Waiting:
				machine_Serving_Serving_Waiting_react(true);
				break;
			case machine_Serving_Serving_Pouring_Vanilla:
				machine_Serving_Serving_Pouring_Vanilla_react(true);
				break;
			case machine_Serving_Serving_Mix_Vanilla:
				machine_Serving_Serving_Mix_Vanilla_react(true);
				break;
			case machine_Serving_Serving_MilkCloud:
				machine_Serving_Serving_MilkCloud_react(true);
				break;
			case machine_Serving_Serving_nitrogen_injection:
				machine_Serving_Serving_nitrogen_injection_react(true);
				break;
			case machine_cleaning:
				machine_cleaning_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!internalEventQueue.isEmpty()) {
			return internalEventQueue.poll();
		}
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_Machine();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$||stateVector[3] != State.$NullState$||stateVector[4] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		startTimer = false;
		accept = false;
		clean = false;
		newOrder = false;
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case machine_Order:
			return stateVector[0].ordinal() >= State.
					machine_Order.ordinal()&& stateVector[0].ordinal() <= State.machine_Order_Cup_Waiting.ordinal();
		case machine_Order_Select_Drink_select:
			return stateVector[0].ordinal() >= State.
					machine_Order_Select_Drink_select.ordinal()&& stateVector[0].ordinal() <= State.machine_Order_Select_Drink_select_Selecting_Waiting.ordinal();
		case machine_Order_Select_Drink_select_Selecting_Chosen:
			return stateVector[0] == State.machine_Order_Select_Drink_select_Selecting_Chosen;
		case machine_Order_Select_Drink_select_Selecting_Waiting:
			return stateVector[0] == State.machine_Order_Select_Drink_select_Selecting_Waiting;
		case machine_Order_Option_Waiting:
			return stateVector[1] == State.machine_Order_Option_Waiting;
		case machine_Order_Payment_Waiting:
			return stateVector[2] == State.machine_Order_Payment_Waiting;
		case machine_Order_Time_Waiting:
			return stateVector[3] == State.machine_Order_Time_Waiting;
		case machine_Order_Time_Running:
			return stateVector[3] == State.machine_Order_Time_Running;
		case machine_Order_Cup_Cup:
			return stateVector[4] == State.machine_Order_Cup_Cup;
		case machine_Order_Cup_Waiting:
			return stateVector[4] == State.machine_Order_Cup_Waiting;
		case machine_Serving:
			return stateVector[0].ordinal() >= State.
					machine_Serving.ordinal()&& stateVector[0].ordinal() <= State.machine_Serving_Serving_nitrogen_injection.ordinal();
		case machine_Serving_Serving_Heating_and_Cup:
			return stateVector[0].ordinal() >= State.
					machine_Serving_Serving_Heating_and_Cup.ordinal()&& stateVector[0].ordinal() <= State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices.ordinal();
		case machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp:
			return stateVector[0] == State.machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp;
		case machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod:
			return stateVector[1] == State.machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod;
		case machine_Serving_Serving_Heating_and_Cup_coffee_exit:
			return stateVector[1] == State.machine_Serving_Serving_Heating_and_Cup_coffee_exit;
		case machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing:
			return stateVector[2] == State.machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing;
		case machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping:
			return stateVector[2] == State.machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping;
		case machine_Serving_Serving_Heating_and_Cup_expresso_exit:
			return stateVector[2] == State.machine_Serving_Serving_Heating_and_Cup_expresso_exit;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup:
			return stateVector[3] == State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag:
			return stateVector[3] == State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit:
			return stateVector[3] == State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup:
			return stateVector[3] == State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices:
			return stateVector[3] == State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices;
		case machine_Serving_Serving_Water_and_Sugar:
			return stateVector[0].ordinal() >= State.
					machine_Serving_Serving_Water_and_Sugar.ordinal()&& stateVector[0].ordinal() <= State.machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting.ordinal();
		case machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water:
			return stateVector[0] == State.machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar:
			return stateVector[1] == State.machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup:
			return stateVector[1] == State.machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons:
			return stateVector[1] == State.machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing:
			return stateVector[1] == State.machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting:
			return stateVector[1] == State.machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting;
		case machine_Serving_Serving_Infusing:
			return stateVector[0] == State.machine_Serving_Serving_Infusing;
		case machine_Serving_Serving_Remove_bag:
			return stateVector[0] == State.machine_Serving_Serving_Remove_bag;
		case machine_Serving_Serving_Waiting:
			return stateVector[0] == State.machine_Serving_Serving_Waiting;
		case machine_Serving_Serving_Pouring_Vanilla:
			return stateVector[0] == State.machine_Serving_Serving_Pouring_Vanilla;
		case machine_Serving_Serving_Mix_Vanilla:
			return stateVector[0] == State.machine_Serving_Serving_Mix_Vanilla;
		case machine_Serving_Serving_MilkCloud:
			return stateVector[0] == State.machine_Serving_Serving_MilkCloud;
		case machine_Serving_Serving_nitrogen_injection:
			return stateVector[0] == State.machine_Serving_Serving_nitrogen_injection;
		case machine_cleaning:
			return stateVector[0] == State.machine_cleaning;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	private void raiseStartTimer() {
	
		internalEventQueue.add( new Runnable() {
			@Override public void run() {
				startTimer = true;					
				singleCycle();
			}
		});
	}
	
	private void raiseAccept() {
	
		internalEventQueue.add( new Runnable() {
			@Override public void run() {
				accept = true;					
				singleCycle();
			}
		});
	}
	
	private void raiseClean() {
	
		internalEventQueue.add( new Runnable() {
			@Override public void run() {
				clean = true;					
				singleCycle();
			}
		});
	}
	
	private void raiseNewOrder() {
	
		internalEventQueue.add( new Runnable() {
			@Override public void run() {
				newOrder = true;					
				singleCycle();
			}
		});
	}
	
	public synchronized void raiseB_drink() {
		sCInterface.raiseB_drink();
	}
	
	public synchronized void raiseS_Slide() {
		sCInterface.raiseS_Slide();
	}
	
	public synchronized void raiseB_option() {
		sCInterface.raiseB_option();
	}
	
	public synchronized void raiseC_coin() {
		sCInterface.raiseC_coin();
	}
	
	public synchronized void raiseC_NFC() {
		sCInterface.raiseC_NFC();
	}
	
	public synchronized void raiseB_Cancel() {
		sCInterface.raiseB_Cancel();
	}
	
	public synchronized void raiseCup_Taken() {
		sCInterface.raiseCup_Taken();
	}
	
	public synchronized void raiseB_Cup() {
		sCInterface.raiseB_Cup();
	}
	
	public synchronized boolean isRaisedCancel() {
		return sCInterface.isRaisedCancel();
	}
	
	public synchronized boolean isRaisedReset() {
		return sCInterface.isRaisedReset();
	}
	
	public synchronized boolean isRaisedPreparing() {
		return sCInterface.isRaisedPreparing();
	}
	
	public synchronized boolean isRaisedCoffeePod() {
		return sCInterface.isRaisedCoffeePod();
	}
	
	public synchronized boolean isRaisedEndCoffeePod() {
		return sCInterface.isRaisedEndCoffeePod();
	}
	
	public synchronized boolean isRaisedCrushing() {
		return sCInterface.isRaisedCrushing();
	}
	
	public synchronized boolean isRaisedEndCrushing() {
		return sCInterface.isRaisedEndCrushing();
	}
	
	public synchronized boolean isRaisedTamping() {
		return sCInterface.isRaisedTamping();
	}
	
	public synchronized boolean isRaisedEndTamping() {
		return sCInterface.isRaisedEndTamping();
	}
	
	public synchronized boolean isRaisedHeating() {
		return sCInterface.isRaisedHeating();
	}
	
	public synchronized boolean isRaisedEndHeating() {
		return sCInterface.isRaisedEndHeating();
	}
	
	public synchronized boolean isRaisedPlacingCup() {
		return sCInterface.isRaisedPlacingCup();
	}
	
	public synchronized boolean isRaisedEndPlacingCup() {
		return sCInterface.isRaisedEndPlacingCup();
	}
	
	public synchronized boolean isRaisedPouringWater() {
		return sCInterface.isRaisedPouringWater();
	}
	
	public synchronized boolean isRaisedEndPouringWater() {
		return sCInterface.isRaisedEndPouringWater();
	}
	
	public synchronized boolean isRaisedPouringSugar() {
		return sCInterface.isRaisedPouringSugar();
	}
	
	public synchronized boolean isRaisedEndPouringSugar() {
		return sCInterface.isRaisedEndPouringSugar();
	}
	
	public synchronized boolean isRaisedInfusing() {
		return sCInterface.isRaisedInfusing();
	}
	
	public synchronized boolean isRaisedEndInfusing() {
		return sCInterface.isRaisedEndInfusing();
	}
	
	public synchronized boolean isRaisedRemovingBag() {
		return sCInterface.isRaisedRemovingBag();
	}
	
	public synchronized boolean isRaisedEndRemovingBag() {
		return sCInterface.isRaisedEndRemovingBag();
	}
	
	public synchronized boolean isRaisedPuttingTea() {
		return sCInterface.isRaisedPuttingTea();
	}
	
	public synchronized boolean isRaisedEndPuttingTea() {
		return sCInterface.isRaisedEndPuttingTea();
	}
	
	public synchronized boolean isRaisedDrinkReady() {
		return sCInterface.isRaisedDrinkReady();
	}
	
	public synchronized boolean isRaisedCleanning() {
		return sCInterface.isRaisedCleanning();
	}
	
	public synchronized boolean isRaisedEndCleanning() {
		return sCInterface.isRaisedEndCleanning();
	}
	
	public synchronized boolean isRaisedProgressBar() {
		return sCInterface.isRaisedProgressBar();
	}
	
	public synchronized boolean isRaisedPouringMapleSyrup() {
		return sCInterface.isRaisedPouringMapleSyrup();
	}
	
	public synchronized boolean isRaisedEndPouringMapleSyrup() {
		return sCInterface.isRaisedEndPouringMapleSyrup();
	}
	
	public synchronized boolean isRaisedPouringSoup() {
		return sCInterface.isRaisedPouringSoup();
	}
	
	public synchronized boolean isRaisedPouringSpice() {
		return sCInterface.isRaisedPouringSpice();
	}
	
	public synchronized boolean isRaisedEndPouringSpice() {
		return sCInterface.isRaisedEndPouringSpice();
	}
	
	public synchronized boolean isRaisedPouringCroutons() {
		return sCInterface.isRaisedPouringCroutons();
	}
	
	public synchronized boolean isRaisedEndPouringCroutons() {
		return sCInterface.isRaisedEndPouringCroutons();
	}
	
	public synchronized boolean isRaisedPouringVanilla() {
		return sCInterface.isRaisedPouringVanilla();
	}
	
	public synchronized boolean isRaisedMixVanilla() {
		return sCInterface.isRaisedMixVanilla();
	}
	
	public synchronized boolean isRaisedEndVanilla() {
		return sCInterface.isRaisedEndVanilla();
	}
	
	public synchronized boolean isRaisedPouringMilkCloud() {
		return sCInterface.isRaisedPouringMilkCloud();
	}
	
	public synchronized boolean isRaisedEndMilkCloud() {
		return sCInterface.isRaisedEndMilkCloud();
	}
	
	public synchronized boolean isRaisedNitrogen() {
		return sCInterface.isRaisedNitrogen();
	}
	
	public synchronized boolean isRaisedEndNitrogen() {
		return sCInterface.isRaisedEndNitrogen();
	}
	
	public synchronized boolean isRaisedACup() {
		return sCInterface.isRaisedACup();
	}
	
	public synchronized long getPrice() {
		return sCInterface.getPrice();
	}
	
	public synchronized void setPrice(long value) {
		sCInterface.setPrice(value);
	}
	
	public synchronized long getMoney() {
		return sCInterface.getMoney();
	}
	
	public synchronized void setMoney(long value) {
		sCInterface.setMoney(value);
	}
	
	public synchronized boolean getWater() {
		return sCInterface.getWater();
	}
	
	public synchronized void setWater(boolean value) {
		sCInterface.setWater(value);
	}
	
	public synchronized boolean getSugar() {
		return sCInterface.getSugar();
	}
	
	public synchronized void setSugar(boolean value) {
		sCInterface.setSugar(value);
	}
	
	public synchronized long getAPercent() {
		return sCInterface.getAPercent();
	}
	
	public synchronized void setAPercent(long value) {
		sCInterface.setAPercent(value);
	}
	
	public synchronized boolean getCupIsTaken() {
		return sCInterface.getCupIsTaken();
	}
	
	public synchronized void setCupIsTaken(boolean value) {
		sCInterface.setCupIsTaken(value);
	}
	
	public synchronized boolean getCleanIsDone() {
		return sCInterface.getCleanIsDone();
	}
	
	public synchronized void setCleanIsDone(boolean value) {
		sCInterface.setCleanIsDone(value);
	}
	
	public synchronized boolean getCup() {
		return sCInterface.getCup();
	}
	
	public synchronized void setCup(boolean value) {
		sCInterface.setCup(value);
	}
	
	private boolean check_Machine_Serving_Serving_Heating_and_Cup_coffee__choice_0_tr0_tr0() {
		return sCInterface.operationCallback.isCoffee();
	}
	
	private boolean check_Machine_Serving_Serving_Heating_and_Cup_expresso__choice_0_tr0_tr0() {
		return sCInterface.operationCallback.isExpresso();
	}
	
	private boolean check_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0_tr0_tr0() {
		return (sCInterface.operationCallback.isTea() || sCInterface.operationCallback.isIceTea());
	}
	
	private boolean check_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0_tr2_tr2() {
		return sCInterface.operationCallback.isSoup();
	}
	
	private boolean check_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_1_tr0_tr0() {
		return sCInterface.getCup();
	}
	
	private boolean check_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr0_tr0() {
		return sCInterface.operationCallback.isSugar();
	}
	
	private boolean check_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr1_tr1() {
		return sCInterface.operationCallback.isMapleSyrup();
	}
	
	private boolean check_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr2_tr2() {
		return sCInterface.operationCallback.isCroutons();
	}
	
	private boolean check_Machine_Serving_Serving__choice_0_tr0_tr0() {
		return (sCInterface.operationCallback.isTea() || sCInterface.operationCallback.isIceTea());
	}
	
	private boolean check_Machine_Serving_Serving__choice_0_tr2_tr2() {
		return sCInterface.operationCallback.isVanilla();
	}
	
	private boolean check_Machine_Serving_Serving__choice_1_tr0_tr0() {
		return sCInterface.operationCallback.isMilkCloud();
	}
	
	private boolean check_Machine_Serving_Serving__choice_1_tr2_tr2() {
		return sCInterface.operationCallback.isIceTea();
	}
	
	private void effect_Machine_Serving_Serving_Heating_and_Cup_coffee__choice_0_tr0() {
		sCInterface.raiseCoffeePod();
		
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod_default();
	}
	
	private void effect_Machine_Serving_Serving_Heating_and_Cup_coffee__choice_0_tr1() {
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_exit_default();
	}
	
	private void effect_Machine_Serving_Serving_Heating_and_Cup_expresso__choice_0_tr0() {
		sCInterface.raiseCrushing();
		
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing_default();
	}
	
	private void effect_Machine_Serving_Serving_Heating_and_Cup_expresso__choice_0_tr1() {
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_exit_default();
	}
	
	private void effect_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0_tr0() {
		sCInterface.raisePuttingTea();
		
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag_default();
	}
	
	private void effect_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0_tr2() {
		sCInterface.raisePouringSoup();
		
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup_default();
	}
	
	private void effect_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0_tr1() {
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit_default();
	}
	
	private void effect_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_1_tr0() {
		react_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0();
	}
	
	private void effect_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_1_tr1() {
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup_default();
	}
	
	private void effect_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr0() {
		enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar_default();
	}
	
	private void effect_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr1() {
		enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup_default();
	}
	
	private void effect_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr2() {
		enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting_default();
	}
	
	private void effect_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr3() {
		enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing_default();
	}
	
	private void effect_Machine_Serving_Serving__choice_0_tr0() {
		sCInterface.raiseInfusing();
		
		enterSequence_Machine_Serving_Serving_Infusing_default();
	}
	
	private void effect_Machine_Serving_Serving__choice_0_tr2() {
		sCInterface.raisePouringVanilla();
		
		enterSequence_Machine_Serving_Serving_Pouring_Vanilla_default();
	}
	
	private void effect_Machine_Serving_Serving__choice_0_tr1() {
		react_Machine_Serving_Serving__choice_1();
	}
	
	private void effect_Machine_Serving_Serving__choice_1_tr0() {
		sCInterface.raisePouringMilkCloud();
		
		enterSequence_Machine_Serving_Serving_MilkCloud_default();
	}
	
	private void effect_Machine_Serving_Serving__choice_1_tr2() {
		sCInterface.raiseNitrogen();
		
		enterSequence_Machine_Serving_Serving_nitrogen_injection_default();
	}
	
	private void effect_Machine_Serving_Serving__choice_1_tr1() {
		enterSequence_Machine_Serving_Serving_Waiting_default();
	}
	
	/* Entry action for state 'Chosen'. */
	private void entryAction_Machine_Order_Select_Drink_select_Selecting_Chosen() {
		sCInterface.setPrice(sCInterface.operationCallback.newPrice());
		
		raiseAccept();
		
		raiseStartTimer();
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_Machine_Order_Select_Drink_select_Selecting_Waiting() {
		sCInterface.setMoney(0);
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_Machine_Order_Payment_Waiting() {
		raiseAccept();
	}
	
	/* Entry action for state 'Running'. */
	private void entryAction_Machine_Order_Time_Running() {
		timer.setTimer(this, 0, (45 * 1000), false);
	}
	
	/* Entry action for state 'Cup'. */
	private void entryAction_Machine_Order_Cup_Cup() {
		sCInterface.setCup(!sCInterface.cup);
		
		sCInterface.raiseACup();
		
		sCInterface.setPrice(sCInterface.operationCallback.newPrice());
	}
	
	/* Entry action for state 'Serving'. */
	private void entryAction_Machine_Serving() {
		timer.setTimer(this, 1, sCInterface.getAPercent(), true);
	}
	
	/* Entry action for state 'Waiting Temp'. */
	private void entryAction_Machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp() {
		timer.setTimer(this, 2, (sCInterface.operationCallback.getHeatingTime() * 1000), false);
		
		sCInterface.raiseHeating();
	}
	
	/* Entry action for state 'Placing pod'. */
	private void entryAction_Machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod() {
		timer.setTimer(this, 3, (3 * 1000), false);
	}
	
	/* Entry action for state 'Grain crushing'. */
	private void entryAction_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing() {
		timer.setTimer(this, 4, (sCInterface.operationCallback.getCrushingTime() * 1000), false);
	}
	
	/* Entry action for state 'Grain tamping'. */
	private void entryAction_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping() {
		timer.setTimer(this, 5, ((sCInterface.operationCallback.getCrushingTime() / 4) * 1000), false);
	}
	
	/* Entry action for state 'Placing cup'. */
	private void entryAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup() {
		timer.setTimer(this, 6, (3 * 1000), false);
		
		sCInterface.raisePlacingCup();
	}
	
	/* Entry action for state 'Putting Bag'. */
	private void entryAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag() {
		timer.setTimer(this, 7, (3 * 1000), false);
	}
	
	/* Entry action for state 'Exit'. */
	private void entryAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit() {
		sCInterface.setCupIsTaken(false);
	}
	
	/* Entry action for state 'Putting soup'. */
	private void entryAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup() {
		timer.setTimer(this, 8, (3 * 1000), false);
	}
	
	/* Entry action for state 'Spices'. */
	private void entryAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices() {
		timer.setTimer(this, 9, (sCInterface.operationCallback.getPouringSpices() * 1000), false);
	}
	
	/* Entry action for state 'Water'. */
	private void entryAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water() {
		timer.setTimer(this, 10, (sCInterface.operationCallback.getPouringWater() * 1000), false);
		
		sCInterface.raisePouringWater();
	}
	
	/* Entry action for state 'Sugar'. */
	private void entryAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar() {
		timer.setTimer(this, 11, (sCInterface.operationCallback.getPouringSugar() * 1000), false);
		
		sCInterface.raisePouringSugar();
	}
	
	/* Entry action for state 'MapleSyrup'. */
	private void entryAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup() {
		timer.setTimer(this, 12, (sCInterface.operationCallback.getPouringSugar() * 1000), false);
		
		sCInterface.raisePouringMapleSyrup();
	}
	
	/* Entry action for state 'Croutons'. */
	private void entryAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons() {
		timer.setTimer(this, 13, (3 * 1000), false);
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting() {
		timer.setTimer(this, 14, (3 * 1000), false);
	}
	
	/* Entry action for state 'Infusing'. */
	private void entryAction_Machine_Serving_Serving_Infusing() {
		timer.setTimer(this, 15, (sCInterface.operationCallback.getInfusingTime() * 1000), false);
	}
	
	/* Entry action for state 'Remove bag'. */
	private void entryAction_Machine_Serving_Serving_Remove_bag() {
		timer.setTimer(this, 16, (3 * 1000), false);
		
		sCInterface.raiseRemovingBag();
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_Machine_Serving_Serving_Waiting() {
		raiseClean();
		
		sCInterface.raiseDrinkReady();
	}
	
	/* Entry action for state 'Pouring Vanilla'. */
	private void entryAction_Machine_Serving_Serving_Pouring_Vanilla() {
		timer.setTimer(this, 17, (3 * 1000), false);
	}
	
	/* Entry action for state 'Mix Vanilla'. */
	private void entryAction_Machine_Serving_Serving_Mix_Vanilla() {
		timer.setTimer(this, 18, (5 * 1000), false);
	}
	
	/* Entry action for state 'MilkCloud'. */
	private void entryAction_Machine_Serving_Serving_MilkCloud() {
		timer.setTimer(this, 19, (3 * 1000), false);
	}
	
	/* Entry action for state 'nitrogen injection'. */
	private void entryAction_Machine_Serving_Serving_nitrogen_injection() {
		timer.setTimer(this, 20, (sCInterface.operationCallback.getNitrogenTime() * 1000), false);
	}
	
	/* Entry action for state 'cleaning'. */
	private void entryAction_Machine_cleaning() {
		timer.setTimer(this, 21, (5 * 1000), false);
		
		sCInterface.raiseCleanning();
	}
	
	/* Exit action for state 'Running'. */
	private void exitAction_Machine_Order_Time_Running() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Serving'. */
	private void exitAction_Machine_Serving() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Waiting Temp'. */
	private void exitAction_Machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Placing pod'. */
	private void exitAction_Machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Grain crushing'. */
	private void exitAction_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Grain tamping'. */
	private void exitAction_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Placing cup'. */
	private void exitAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'Putting Bag'. */
	private void exitAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag() {
		timer.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'Putting soup'. */
	private void exitAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup() {
		timer.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'Spices'. */
	private void exitAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices() {
		timer.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'Water'. */
	private void exitAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water() {
		timer.unsetTimer(this, 10);
	}
	
	/* Exit action for state 'Sugar'. */
	private void exitAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar() {
		timer.unsetTimer(this, 11);
	}
	
	/* Exit action for state 'MapleSyrup'. */
	private void exitAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup() {
		timer.unsetTimer(this, 12);
	}
	
	/* Exit action for state 'Croutons'. */
	private void exitAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons() {
		timer.unsetTimer(this, 13);
	}
	
	/* Exit action for state 'Waiting'. */
	private void exitAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting() {
		timer.unsetTimer(this, 14);
	}
	
	/* Exit action for state 'Infusing'. */
	private void exitAction_Machine_Serving_Serving_Infusing() {
		timer.unsetTimer(this, 15);
	}
	
	/* Exit action for state 'Remove bag'. */
	private void exitAction_Machine_Serving_Serving_Remove_bag() {
		timer.unsetTimer(this, 16);
	}
	
	/* Exit action for state 'Pouring Vanilla'. */
	private void exitAction_Machine_Serving_Serving_Pouring_Vanilla() {
		timer.unsetTimer(this, 17);
	}
	
	/* Exit action for state 'Mix Vanilla'. */
	private void exitAction_Machine_Serving_Serving_Mix_Vanilla() {
		timer.unsetTimer(this, 18);
	}
	
	/* Exit action for state 'MilkCloud'. */
	private void exitAction_Machine_Serving_Serving_MilkCloud() {
		timer.unsetTimer(this, 19);
	}
	
	/* Exit action for state 'nitrogen injection'. */
	private void exitAction_Machine_Serving_Serving_nitrogen_injection() {
		timer.unsetTimer(this, 20);
	}
	
	/* Exit action for state 'cleaning'. */
	private void exitAction_Machine_cleaning() {
		timer.unsetTimer(this, 21);
	}
	
	/* 'default' enter sequence for state Order */
	private void enterSequence_Machine_Order_default() {
		enterSequence_Machine_Order_Select_default();
		enterSequence_Machine_Order_Option_default();
		enterSequence_Machine_Order_Payment_default();
		enterSequence_Machine_Order_Time_default();
		enterSequence_Machine_Order_Cup_default();
	}
	
	/* 'default' enter sequence for state Drink_select */
	private void enterSequence_Machine_Order_Select_Drink_select_default() {
		enterSequence_Machine_Order_Select_Drink_select_Selecting_default();
	}
	
	/* 'default' enter sequence for state Chosen */
	private void enterSequence_Machine_Order_Select_Drink_select_Selecting_Chosen_default() {
		entryAction_Machine_Order_Select_Drink_select_Selecting_Chosen();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Order_Select_Drink_select_Selecting_Chosen;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Order_Select_Drink_select_Selecting_Waiting_default() {
		entryAction_Machine_Order_Select_Drink_select_Selecting_Waiting();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Order_Select_Drink_select_Selecting_Waiting;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Order_Option_Waiting_default() {
		nextStateIndex = 1;
		stateVector[1] = State.machine_Order_Option_Waiting;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Order_Payment_Waiting_default() {
		entryAction_Machine_Order_Payment_Waiting();
		nextStateIndex = 2;
		stateVector[2] = State.machine_Order_Payment_Waiting;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Order_Time_Waiting_default() {
		nextStateIndex = 3;
		stateVector[3] = State.machine_Order_Time_Waiting;
	}
	
	/* 'default' enter sequence for state Running */
	private void enterSequence_Machine_Order_Time_Running_default() {
		entryAction_Machine_Order_Time_Running();
		nextStateIndex = 3;
		stateVector[3] = State.machine_Order_Time_Running;
	}
	
	/* 'default' enter sequence for state Cup */
	private void enterSequence_Machine_Order_Cup_Cup_default() {
		entryAction_Machine_Order_Cup_Cup();
		nextStateIndex = 4;
		stateVector[4] = State.machine_Order_Cup_Cup;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Order_Cup_Waiting_default() {
		nextStateIndex = 4;
		stateVector[4] = State.machine_Order_Cup_Waiting;
	}
	
	/* 'default' enter sequence for state Serving */
	private void enterSequence_Machine_Serving_default() {
		entryAction_Machine_Serving();
		enterSequence_Machine_Serving_Serving_default();
	}
	
	/* 'default' enter sequence for state Heating and Cup */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_default() {
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_Heating_default();
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_default();
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_default();
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_default();
	}
	
	/* 'default' enter sequence for state Waiting Temp */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp_default() {
		entryAction_Machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp;
	}
	
	/* 'default' enter sequence for state Placing pod */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod_default() {
		entryAction_Machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod();
		nextStateIndex = 1;
		stateVector[1] = State.machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod;
	}
	
	/* 'default' enter sequence for state exit */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_exit_default() {
		nextStateIndex = 1;
		stateVector[1] = State.machine_Serving_Serving_Heating_and_Cup_coffee_exit;
	}
	
	/* 'default' enter sequence for state Grain crushing */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing_default() {
		entryAction_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing();
		nextStateIndex = 2;
		stateVector[2] = State.machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing;
	}
	
	/* 'default' enter sequence for state Grain tamping */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping_default() {
		entryAction_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping();
		nextStateIndex = 2;
		stateVector[2] = State.machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping;
	}
	
	/* 'default' enter sequence for state exit */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_exit_default() {
		nextStateIndex = 2;
		stateVector[2] = State.machine_Serving_Serving_Heating_and_Cup_expresso_exit;
	}
	
	/* 'default' enter sequence for state Placing cup */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup_default() {
		entryAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup();
		nextStateIndex = 3;
		stateVector[3] = State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup;
	}
	
	/* 'default' enter sequence for state Putting Bag */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag_default() {
		entryAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag();
		nextStateIndex = 3;
		stateVector[3] = State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag;
	}
	
	/* 'default' enter sequence for state Exit */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit_default() {
		entryAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit();
		nextStateIndex = 3;
		stateVector[3] = State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit;
	}
	
	/* 'default' enter sequence for state Putting soup */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup_default() {
		entryAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup();
		nextStateIndex = 3;
		stateVector[3] = State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup;
	}
	
	/* 'default' enter sequence for state Spices */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices_default() {
		entryAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices();
		nextStateIndex = 3;
		stateVector[3] = State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices;
	}
	
	/* 'default' enter sequence for state Water and Sugar */
	private void enterSequence_Machine_Serving_Serving_Water_and_Sugar_default() {
		enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_default();
		enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_default();
	}
	
	/* 'default' enter sequence for state Water */
	private void enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water_default() {
		entryAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water;
	}
	
	/* 'default' enter sequence for state Sugar */
	private void enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar_default() {
		entryAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar();
		nextStateIndex = 1;
		stateVector[1] = State.machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar;
	}
	
	/* 'default' enter sequence for state MapleSyrup */
	private void enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup_default() {
		entryAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup();
		nextStateIndex = 1;
		stateVector[1] = State.machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup;
	}
	
	/* 'default' enter sequence for state Croutons */
	private void enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons_default() {
		entryAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons();
		nextStateIndex = 1;
		stateVector[1] = State.machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons;
	}
	
	/* 'default' enter sequence for state Nothing */
	private void enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing_default() {
		nextStateIndex = 1;
		stateVector[1] = State.machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting_default() {
		entryAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting();
		nextStateIndex = 1;
		stateVector[1] = State.machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting;
	}
	
	/* 'default' enter sequence for state Infusing */
	private void enterSequence_Machine_Serving_Serving_Infusing_default() {
		entryAction_Machine_Serving_Serving_Infusing();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Serving_Serving_Infusing;
	}
	
	/* 'default' enter sequence for state Remove bag */
	private void enterSequence_Machine_Serving_Serving_Remove_bag_default() {
		entryAction_Machine_Serving_Serving_Remove_bag();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Serving_Serving_Remove_bag;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Serving_Serving_Waiting_default() {
		entryAction_Machine_Serving_Serving_Waiting();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Serving_Serving_Waiting;
	}
	
	/* 'default' enter sequence for state Pouring Vanilla */
	private void enterSequence_Machine_Serving_Serving_Pouring_Vanilla_default() {
		entryAction_Machine_Serving_Serving_Pouring_Vanilla();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Serving_Serving_Pouring_Vanilla;
	}
	
	/* 'default' enter sequence for state Mix Vanilla */
	private void enterSequence_Machine_Serving_Serving_Mix_Vanilla_default() {
		entryAction_Machine_Serving_Serving_Mix_Vanilla();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Serving_Serving_Mix_Vanilla;
	}
	
	/* 'default' enter sequence for state MilkCloud */
	private void enterSequence_Machine_Serving_Serving_MilkCloud_default() {
		entryAction_Machine_Serving_Serving_MilkCloud();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Serving_Serving_MilkCloud;
	}
	
	/* 'default' enter sequence for state nitrogen injection */
	private void enterSequence_Machine_Serving_Serving_nitrogen_injection_default() {
		entryAction_Machine_Serving_Serving_nitrogen_injection();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Serving_Serving_nitrogen_injection;
	}
	
	/* 'default' enter sequence for state cleaning */
	private void enterSequence_Machine_cleaning_default() {
		entryAction_Machine_cleaning();
		nextStateIndex = 0;
		stateVector[0] = State.machine_cleaning;
	}
	
	/* 'default' enter sequence for region Machine */
	private void enterSequence_Machine_default() {
		react_Machine__entry_Default();
	}
	
	/* 'default' enter sequence for region Select */
	private void enterSequence_Machine_Order_Select_default() {
		react_Machine_Order_Select__entry_Default();
	}
	
	/* 'default' enter sequence for region Selecting */
	private void enterSequence_Machine_Order_Select_Drink_select_Selecting_default() {
		react_Machine_Order_Select_Drink_select_Selecting_default();
	}
	
	/* 'default' enter sequence for region Option */
	private void enterSequence_Machine_Order_Option_default() {
		react_Machine_Order_Option__entry_Default();
	}
	
	/* 'default' enter sequence for region Payment */
	private void enterSequence_Machine_Order_Payment_default() {
		react_Machine_Order_Payment__entry_Default();
	}
	
	/* 'default' enter sequence for region Time */
	private void enterSequence_Machine_Order_Time_default() {
		react_Machine_Order_Time__entry_Default();
	}
	
	/* 'default' enter sequence for region Cup */
	private void enterSequence_Machine_Order_Cup_default() {
		react_Machine_Order_Cup_default();
	}
	
	/* 'default' enter sequence for region Serving */
	private void enterSequence_Machine_Serving_Serving_default() {
		react_Machine_Serving_Serving_default();
	}
	
	/* 'default' enter sequence for region Heating */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_Heating_default() {
		react_Machine_Serving_Serving_Heating_and_Cup_Heating__entry_Default();
	}
	
	/* 'default' enter sequence for region coffee */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_default() {
		react_Machine_Serving_Serving_Heating_and_Cup_coffee__entry_Default();
	}
	
	/* 'default' enter sequence for region expresso */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_default() {
		react_Machine_Serving_Serving_Heating_and_Cup_expresso__entry_Default();
	}
	
	/* 'default' enter sequence for region cup & tea & soup */
	private void enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_default() {
		react_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__entry_Default();
	}
	
	/* 'default' enter sequence for region Pouring water */
	private void enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_default() {
		react_Machine_Serving_Serving_Water_and_Sugar_Pouring_water__entry_Default();
	}
	
	/* 'default' enter sequence for region Pouring sugar */
	private void enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_default() {
		react_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__entry_Default();
	}
	
	/* Default exit sequence for state Order */
	private void exitSequence_Machine_Order() {
		exitSequence_Machine_Order_Select();
		exitSequence_Machine_Order_Option();
		exitSequence_Machine_Order_Payment();
		exitSequence_Machine_Order_Time();
		exitSequence_Machine_Order_Cup();
	}
	
	/* Default exit sequence for state Chosen */
	private void exitSequence_Machine_Order_Select_Drink_select_Selecting_Chosen() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Order_Select_Drink_select_Selecting_Waiting() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Order_Option_Waiting() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Order_Payment_Waiting() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Order_Time_Waiting() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state Running */
	private void exitSequence_Machine_Order_Time_Running() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_Machine_Order_Time_Running();
	}
	
	/* Default exit sequence for state Cup */
	private void exitSequence_Machine_Order_Cup_Cup() {
		nextStateIndex = 4;
		stateVector[4] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Order_Cup_Waiting() {
		nextStateIndex = 4;
		stateVector[4] = State.$NullState$;
	}
	
	/* Default exit sequence for state Serving */
	private void exitSequence_Machine_Serving() {
		exitSequence_Machine_Serving_Serving();
		exitAction_Machine_Serving();
	}
	
	/* Default exit sequence for state Heating and Cup */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup() {
		exitSequence_Machine_Serving_Serving_Heating_and_Cup_Heating();
		exitSequence_Machine_Serving_Serving_Heating_and_Cup_coffee();
		exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso();
		exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup();
	}
	
	/* Default exit sequence for state Waiting Temp */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp();
	}
	
	/* Default exit sequence for state Placing pod */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod();
	}
	
	/* Default exit sequence for state exit */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_exit() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Grain crushing */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing();
	}
	
	/* Default exit sequence for state Grain tamping */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping();
	}
	
	/* Default exit sequence for state exit */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_exit() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state Placing cup */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup();
	}
	
	/* Default exit sequence for state Putting Bag */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag();
	}
	
	/* Default exit sequence for state Exit */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state Putting soup */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup();
	}
	
	/* Default exit sequence for state Spices */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices();
	}
	
	/* Default exit sequence for state Water and Sugar */
	private void exitSequence_Machine_Serving_Serving_Water_and_Sugar() {
		exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_water();
		exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar();
	}
	
	/* Default exit sequence for state Water */
	private void exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water();
	}
	
	/* Default exit sequence for state Sugar */
	private void exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar();
	}
	
	/* Default exit sequence for state MapleSyrup */
	private void exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup();
	}
	
	/* Default exit sequence for state Croutons */
	private void exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons();
	}
	
	/* Default exit sequence for state Nothing */
	private void exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting();
	}
	
	/* Default exit sequence for state Infusing */
	private void exitSequence_Machine_Serving_Serving_Infusing() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Infusing();
	}
	
	/* Default exit sequence for state Remove bag */
	private void exitSequence_Machine_Serving_Serving_Remove_bag() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Remove_bag();
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Serving_Serving_Waiting() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Pouring Vanilla */
	private void exitSequence_Machine_Serving_Serving_Pouring_Vanilla() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Pouring_Vanilla();
	}
	
	/* Default exit sequence for state Mix Vanilla */
	private void exitSequence_Machine_Serving_Serving_Mix_Vanilla() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_Mix_Vanilla();
	}
	
	/* Default exit sequence for state MilkCloud */
	private void exitSequence_Machine_Serving_Serving_MilkCloud() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_MilkCloud();
	}
	
	/* Default exit sequence for state nitrogen injection */
	private void exitSequence_Machine_Serving_Serving_nitrogen_injection() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Machine_Serving_Serving_nitrogen_injection();
	}
	
	/* Default exit sequence for state cleaning */
	private void exitSequence_Machine_cleaning() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Machine_cleaning();
	}
	
	/* Default exit sequence for region Machine */
	private void exitSequence_Machine() {
		switch (stateVector[0]) {
		case machine_Order_Select_Drink_select_Selecting_Chosen:
			exitSequence_Machine_Order_Select_Drink_select_Selecting_Chosen();
			break;
		case machine_Order_Select_Drink_select_Selecting_Waiting:
			exitSequence_Machine_Order_Select_Drink_select_Selecting_Waiting();
			break;
		case machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water();
			break;
		case machine_Serving_Serving_Infusing:
			exitSequence_Machine_Serving_Serving_Infusing();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Remove_bag:
			exitSequence_Machine_Serving_Serving_Remove_bag();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Waiting:
			exitSequence_Machine_Serving_Serving_Waiting();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Pouring_Vanilla:
			exitSequence_Machine_Serving_Serving_Pouring_Vanilla();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Mix_Vanilla:
			exitSequence_Machine_Serving_Serving_Mix_Vanilla();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_MilkCloud:
			exitSequence_Machine_Serving_Serving_MilkCloud();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_nitrogen_injection:
			exitSequence_Machine_Serving_Serving_nitrogen_injection();
			exitAction_Machine_Serving();
			break;
		case machine_cleaning:
			exitSequence_Machine_cleaning();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case machine_Order_Option_Waiting:
			exitSequence_Machine_Order_Option_Waiting();
			break;
		case machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod();
			break;
		case machine_Serving_Serving_Heating_and_Cup_coffee_exit:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_exit();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting();
			exitAction_Machine_Serving();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case machine_Order_Payment_Waiting:
			exitSequence_Machine_Order_Payment_Waiting();
			break;
		case machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing();
			break;
		case machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping();
			break;
		case machine_Serving_Serving_Heating_and_Cup_expresso_exit:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_exit();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case machine_Order_Time_Waiting:
			exitSequence_Machine_Order_Time_Waiting();
			break;
		case machine_Order_Time_Running:
			exitSequence_Machine_Order_Time_Running();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup();
			exitAction_Machine_Serving();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices();
			exitAction_Machine_Serving();
			break;
		default:
			break;
		}
		
		switch (stateVector[4]) {
		case machine_Order_Cup_Cup:
			exitSequence_Machine_Order_Cup_Cup();
			break;
		case machine_Order_Cup_Waiting:
			exitSequence_Machine_Order_Cup_Waiting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Select */
	private void exitSequence_Machine_Order_Select() {
		switch (stateVector[0]) {
		case machine_Order_Select_Drink_select_Selecting_Chosen:
			exitSequence_Machine_Order_Select_Drink_select_Selecting_Chosen();
			break;
		case machine_Order_Select_Drink_select_Selecting_Waiting:
			exitSequence_Machine_Order_Select_Drink_select_Selecting_Waiting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Option */
	private void exitSequence_Machine_Order_Option() {
		switch (stateVector[1]) {
		case machine_Order_Option_Waiting:
			exitSequence_Machine_Order_Option_Waiting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Payment */
	private void exitSequence_Machine_Order_Payment() {
		switch (stateVector[2]) {
		case machine_Order_Payment_Waiting:
			exitSequence_Machine_Order_Payment_Waiting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Time */
	private void exitSequence_Machine_Order_Time() {
		switch (stateVector[3]) {
		case machine_Order_Time_Waiting:
			exitSequence_Machine_Order_Time_Waiting();
			break;
		case machine_Order_Time_Running:
			exitSequence_Machine_Order_Time_Running();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Cup */
	private void exitSequence_Machine_Order_Cup() {
		switch (stateVector[4]) {
		case machine_Order_Cup_Cup:
			exitSequence_Machine_Order_Cup_Cup();
			break;
		case machine_Order_Cup_Waiting:
			exitSequence_Machine_Order_Cup_Waiting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Serving */
	private void exitSequence_Machine_Serving_Serving() {
		switch (stateVector[0]) {
		case machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water();
			break;
		case machine_Serving_Serving_Infusing:
			exitSequence_Machine_Serving_Serving_Infusing();
			break;
		case machine_Serving_Serving_Remove_bag:
			exitSequence_Machine_Serving_Serving_Remove_bag();
			break;
		case machine_Serving_Serving_Waiting:
			exitSequence_Machine_Serving_Serving_Waiting();
			break;
		case machine_Serving_Serving_Pouring_Vanilla:
			exitSequence_Machine_Serving_Serving_Pouring_Vanilla();
			break;
		case machine_Serving_Serving_Mix_Vanilla:
			exitSequence_Machine_Serving_Serving_Mix_Vanilla();
			break;
		case machine_Serving_Serving_MilkCloud:
			exitSequence_Machine_Serving_Serving_MilkCloud();
			break;
		case machine_Serving_Serving_nitrogen_injection:
			exitSequence_Machine_Serving_Serving_nitrogen_injection();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod();
			break;
		case machine_Serving_Serving_Heating_and_Cup_coffee_exit:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_exit();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing();
			break;
		case machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping();
			break;
		case machine_Serving_Serving_Heating_and_Cup_expresso_exit:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_exit();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Heating */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_Heating() {
		switch (stateVector[0]) {
		case machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region coffee */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_coffee() {
		switch (stateVector[1]) {
		case machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod();
			break;
		case machine_Serving_Serving_Heating_and_Cup_coffee_exit:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_exit();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region expresso */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso() {
		switch (stateVector[2]) {
		case machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing();
			break;
		case machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping();
			break;
		case machine_Serving_Serving_Heating_and_Cup_expresso_exit:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_exit();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region cup & tea & soup */
	private void exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup() {
		switch (stateVector[3]) {
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup();
			break;
		case machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices:
			exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Pouring water */
	private void exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_water() {
		switch (stateVector[0]) {
		case machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Pouring sugar */
	private void exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar() {
		switch (stateVector[1]) {
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing();
			break;
		case machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting:
			exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_Machine_Serving_Serving_Heating_and_Cup_coffee__choice_0() {
		if (check_Machine_Serving_Serving_Heating_and_Cup_coffee__choice_0_tr0_tr0()) {
			effect_Machine_Serving_Serving_Heating_and_Cup_coffee__choice_0_tr0();
		} else {
			effect_Machine_Serving_Serving_Heating_and_Cup_coffee__choice_0_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_Machine_Serving_Serving_Heating_and_Cup_expresso__choice_0() {
		if (check_Machine_Serving_Serving_Heating_and_Cup_expresso__choice_0_tr0_tr0()) {
			effect_Machine_Serving_Serving_Heating_and_Cup_expresso__choice_0_tr0();
		} else {
			effect_Machine_Serving_Serving_Heating_and_Cup_expresso__choice_0_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0() {
		if (check_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0_tr0_tr0()) {
			effect_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0_tr0();
		} else {
			if (check_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0_tr2_tr2()) {
				effect_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0_tr2();
			} else {
				effect_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0_tr1();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_1() {
		if (check_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_1_tr0_tr0()) {
			effect_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_1_tr0();
		} else {
			effect_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_1_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0() {
		if (check_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr0_tr0()) {
			effect_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr0();
		} else {
			if (check_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr1_tr1()) {
				effect_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr1();
			} else {
				if (check_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr2_tr2()) {
					effect_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr2();
				} else {
					effect_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0_tr3();
				}
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_Machine_Serving_Serving__choice_0() {
		if (check_Machine_Serving_Serving__choice_0_tr0_tr0()) {
			effect_Machine_Serving_Serving__choice_0_tr0();
		} else {
			if (check_Machine_Serving_Serving__choice_0_tr2_tr2()) {
				effect_Machine_Serving_Serving__choice_0_tr2();
			} else {
				effect_Machine_Serving_Serving__choice_0_tr1();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_Machine_Serving_Serving__choice_1() {
		if (check_Machine_Serving_Serving__choice_1_tr0_tr0()) {
			effect_Machine_Serving_Serving__choice_1_tr0();
		} else {
			if (check_Machine_Serving_Serving__choice_1_tr2_tr2()) {
				effect_Machine_Serving_Serving__choice_1_tr2();
			} else {
				effect_Machine_Serving_Serving__choice_1_tr1();
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine__entry_Default() {
		enterSequence_Machine_Order_default();
	}
	
	/* Default react sequence for initial entry default */
	private void react_Machine_Order_Select_Drink_select_Selecting_default() {
		enterSequence_Machine_Order_Select_Drink_select_Selecting_Waiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Order_Select__entry_Default() {
		enterSequence_Machine_Order_Select_Drink_select_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Order_Option__entry_Default() {
		enterSequence_Machine_Order_Option_Waiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Order_Payment__entry_Default() {
		enterSequence_Machine_Order_Payment_Waiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Order_Time__entry_Default() {
		enterSequence_Machine_Order_Time_Waiting_default();
	}
	
	/* Default react sequence for initial entry default */
	private void react_Machine_Order_Cup_default() {
		enterSequence_Machine_Order_Cup_Waiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Serving_Serving_Heating_and_Cup_Heating__entry_Default() {
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Serving_Serving_Heating_and_Cup_coffee__entry_Default() {
		react_Machine_Serving_Serving_Heating_and_Cup_coffee__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Serving_Serving_Heating_and_Cup_expresso__entry_Default() {
		react_Machine_Serving_Serving_Heating_and_Cup_expresso__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__entry_Default() {
		react_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_1();
	}
	
	/* Default react sequence for initial entry default */
	private void react_Machine_Serving_Serving_default() {
		enterSequence_Machine_Serving_Serving_Heating_and_Cup_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Serving_Serving_Water_and_Sugar_Pouring_water__entry_Default() {
		enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__entry_Default() {
		react_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar__choice_0();
	}
	
	/* The reactions of state null. */
	private void react_Machine_Serving_Serving__sync0() {
		enterSequence_Machine_Serving_Serving_Water_and_Sugar_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean machine_Order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.b_Cancel) {
				exitSequence_Machine_Order();
				sCInterface.raiseCancel();
				
				enterSequence_Machine_Order_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean machine_Order_Select_Drink_select_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean machine_Order_Select_Drink_select_Selecting_Chosen_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.b_drink || sCInterface.b_option)) {
				exitSequence_Machine_Order_Select_Drink_select_Selecting_Chosen();
				enterSequence_Machine_Order_Select_Drink_select_Selecting_Chosen_default();
				machine_Order_Select_Drink_select_react(false);
			} else {
				if (((accept) && (sCInterface.getMoney()>=sCInterface.getPrice()))) {
					exitSequence_Machine_Order();
					sCInterface.raisePreparing();
					
					sCInterface.setAPercent(sCInterface.operationCallback.getPercent());
					
					sCInterface.setCleanIsDone(false);
					
					enterSequence_Machine_Serving_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = machine_Order_Select_Drink_select_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Order_Select_Drink_select_Selecting_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.b_drink) {
				exitSequence_Machine_Order_Select_Drink_select_Selecting_Waiting();
				enterSequence_Machine_Order_Select_Drink_select_Selecting_Chosen_default();
				machine_Order_Select_Drink_select_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Order_Select_Drink_select_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Order_Option_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.s_Slide) {
				exitSequence_Machine_Order_Option_Waiting();
				raiseStartTimer();
				
				enterSequence_Machine_Order_Option_Waiting_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean machine_Order_Payment_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.c_coin || sCInterface.c_NFC)) {
				exitSequence_Machine_Order_Payment_Waiting();
				raiseStartTimer();
				
				sCInterface.setMoney(sCInterface.operationCallback.currentMoney());
				
				enterSequence_Machine_Order_Payment_Waiting_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean machine_Order_Time_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (startTimer) {
				exitSequence_Machine_Order_Time_Waiting();
				enterSequence_Machine_Order_Time_Running_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean machine_Order_Time_Running_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (startTimer) {
				exitSequence_Machine_Order_Time_Running();
				enterSequence_Machine_Order_Time_Running_default();
			} else {
				if (((timeEvents[0]) && ((sCInterface.getPrice()!=0 || sCInterface.getMoney()!=0)))) {
					exitSequence_Machine_Order();
					sCInterface.raiseCancel();
					
					enterSequence_Machine_Order_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean machine_Order_Cup_Cup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.b_Cup || sCInterface.cup_Taken)) {
				exitSequence_Machine_Order_Cup_Cup();
				enterSequence_Machine_Order_Cup_Cup_default();
				machine_Order_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Order_Cup_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.b_Cup || sCInterface.cup_Taken)) {
				exitSequence_Machine_Order_Cup_Waiting();
				enterSequence_Machine_Order_Cup_Cup_default();
				machine_Order_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cup_Taken) {
				exitSequence_Machine_Serving();
				sCInterface.setCupIsTaken(true);
				
				sCInterface.setCup(false);
				
				enterSequence_Machine_cleaning_default();
				react();
			} else {
				if (clean) {
					exitSequence_Machine_Serving();
					enterSequence_Machine_cleaning_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			if (timeEvents[1]) {
				sCInterface.raiseProgressBar();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = machine_Serving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((((((timeEvents[2] && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_coffee_exit)) && true) && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_expresso_exit)) && true) && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit)) && true)) {
				exitSequence_Machine_Serving_Serving_Heating_and_Cup();
				sCInterface.raiseEndHeating();
				
				react_Machine_Serving_Serving__sync0();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_Placing_pod();
				sCInterface.raiseEndCoffeePod();
				
				enterSequence_Machine_Serving_Serving_Heating_and_Cup_coffee_exit_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_coffee_exit_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((((((true && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp)) && timeEvents[2]) && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_expresso_exit)) && true) && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit)) && true)) {
				exitSequence_Machine_Serving_Serving_Heating_and_Cup();
				sCInterface.raiseEndHeating();
				
				react_Machine_Serving_Serving__sync0();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_crushing();
				sCInterface.raiseTamping();
				
				sCInterface.raiseEndCrushing();
				
				enterSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[5]) {
				exitSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_Grain_tamping();
				sCInterface.raiseEndTamping();
				
				enterSequence_Machine_Serving_Serving_Heating_and_Cup_expresso_exit_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_expresso_exit_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((((((true && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp)) && timeEvents[2]) && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_coffee_exit)) && true) && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit)) && true)) {
				exitSequence_Machine_Serving_Serving_Heating_and_Cup();
				sCInterface.raiseEndHeating();
				
				react_Machine_Serving_Serving__sync0();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[6]) {
				exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Placing_cup();
				sCInterface.raiseEndPlacingCup();
				
				react_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup__choice_0();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_Serving_Heating_and_Cup_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[7]) {
				exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_Bag();
				sCInterface.raiseEndPuttingTea();
				
				enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit_default();
				machine_Serving_Serving_Heating_and_Cup_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_Serving_Heating_and_Cup_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((((((true && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_Heating_Waiting_Temp)) && timeEvents[2]) && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_coffee_exit)) && true) && isStateActive(State.machine_Serving_Serving_Heating_and_Cup_expresso_exit)) && true)) {
				exitSequence_Machine_Serving_Serving_Heating_and_Cup();
				sCInterface.raiseEndHeating();
				
				react_Machine_Serving_Serving__sync0();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_Serving_Heating_and_Cup_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[8]) {
				exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Putting_soup();
				sCInterface.raisePouringSpice();
				
				enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices_default();
				machine_Serving_Serving_Heating_and_Cup_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_Serving_Heating_and_Cup_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[9]) {
				exitSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Spices();
				sCInterface.raiseEndPouringSpice();
				
				enterSequence_Machine_Serving_Serving_Heating_and_Cup_cup___tea___soup_Exit_default();
				machine_Serving_Serving_Heating_and_Cup_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_Serving_Heating_and_Cup_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Water_and_Sugar_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.getWater() && sCInterface.getSugar())) {
				exitSequence_Machine_Serving_Serving_Water_and_Sugar();
				sCInterface.setWater(false);
				
				sCInterface.setSugar(false);
				
				react_Machine_Serving_Serving__choice_0();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Water_and_Sugar_Pouring_water_Water_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			if (timeEvents[10]) {
				sCInterface.raiseEndPouringWater();
				
				sCInterface.setWater(true);
			}
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Sugar_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			if (timeEvents[11]) {
				sCInterface.raiseEndPouringSugar();
				
				sCInterface.setSugar(true);
			}
			did_transition = machine_Serving_Serving_Water_and_Sugar_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_MapleSyrup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			if (timeEvents[12]) {
				sCInterface.raiseEndPouringMapleSyrup();
				
				sCInterface.setSugar(true);
			}
			did_transition = machine_Serving_Serving_Water_and_Sugar_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			if (timeEvents[13]) {
				sCInterface.raiseEndPouringCroutons();
				
				sCInterface.setSugar(true);
			}
			did_transition = machine_Serving_Serving_Water_and_Sugar_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Nothing_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = machine_Serving_Serving_Water_and_Sugar_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[14]) {
				exitSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Waiting();
				sCInterface.raisePouringCroutons();
				
				enterSequence_Machine_Serving_Serving_Water_and_Sugar_Pouring_sugar_Croutons_default();
				machine_Serving_Serving_Water_and_Sugar_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_Serving_Water_and_Sugar_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Infusing_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[15]) {
				exitSequence_Machine_Serving_Serving_Infusing();
				sCInterface.raiseEndInfusing();
				
				enterSequence_Machine_Serving_Serving_Remove_bag_default();
				machine_Serving_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Remove_bag_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[16]) {
				exitSequence_Machine_Serving_Serving_Remove_bag();
				sCInterface.raiseEndRemovingBag();
				
				react_Machine_Serving_Serving__choice_1();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = machine_Serving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Pouring_Vanilla_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[17]) {
				exitSequence_Machine_Serving_Serving_Pouring_Vanilla();
				sCInterface.raiseMixVanilla();
				
				enterSequence_Machine_Serving_Serving_Mix_Vanilla_default();
				machine_Serving_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_Mix_Vanilla_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[18]) {
				exitSequence_Machine_Serving_Serving_Mix_Vanilla();
				sCInterface.raiseEndVanilla();
				
				react_Machine_Serving_Serving__choice_1();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_MilkCloud_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[19]) {
				exitSequence_Machine_Serving_Serving_MilkCloud();
				sCInterface.raiseEndMilkCloud();
				
				enterSequence_Machine_Serving_Serving_Waiting_default();
				machine_Serving_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Serving_Serving_nitrogen_injection_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[20]) {
				exitSequence_Machine_Serving_Serving_nitrogen_injection();
				sCInterface.raiseEndNitrogen();
				
				enterSequence_Machine_Serving_Serving_Waiting_default();
				machine_Serving_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Serving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_cleaning_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((newOrder) && ((sCInterface.getCupIsTaken() && sCInterface.getCleanIsDone())))) {
				exitSequence_Machine_cleaning();
				sCInterface.raiseReset();
				
				enterSequence_Machine_Order_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (timeEvents[21]) {
				sCInterface.setCleanIsDone(true);
				
				raiseNewOrder();
				
				sCInterface.raiseEndCleanning();
			}
			if (sCInterface.cup_Taken) {
				sCInterface.setCupIsTaken(true);
				
				raiseNewOrder();
				
				sCInterface.setCup(false);
			}
			did_transition = react();
		}
		return did_transition;
	}
	
}
