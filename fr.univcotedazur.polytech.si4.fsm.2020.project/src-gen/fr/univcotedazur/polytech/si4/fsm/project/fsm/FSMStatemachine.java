/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.fsm;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class FSMStatemachine implements IFSMStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private SCInterfaceOperationCallback operationCallback;
		
		public synchronized void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean b_Coffe;
		
		
		public void raiseB_Coffe() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							b_Coffe = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean b_Expresso;
		
		
		public void raiseB_Expresso() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							b_Expresso = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean b_Tea;
		
		
		public void raiseB_Tea() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							b_Tea = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean s_Sugar;
		
		
		public void raiseS_Sugar() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							s_Sugar = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean s_Size;
		
		
		public void raiseS_Size() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							s_Size = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean s_Temp;
		
		
		public void raiseS_Temp() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							s_Temp = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean c_050;
		
		
		public void raiseC_050() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							c_050 = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean c_025;
		
		
		public void raiseC_025() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							c_025 = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean c_010;
		
		
		public void raiseC_010() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							c_010 = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean c_NFC;
		
		
		public void raiseC_NFC() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							c_NFC = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean b_Cancel;
		
		
		public void raiseB_Cancel() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							b_Cancel = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cup_Taken;
		
		
		public void raiseCup_Taken() {
			synchronized(FSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cup_Taken = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean onCancel;
		
		
		public boolean isRaisedOnCancel() {
			synchronized(FSMStatemachine.this) {
				return onCancel;
			}
		}
		
		protected void raiseOnCancel() {
			synchronized(FSMStatemachine.this) {
				onCancel = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onOnCancelRaised();
				}
			}
		}
		
		private boolean preparing;
		
		
		public boolean isRaisedPreparing() {
			synchronized(FSMStatemachine.this) {
				return preparing;
			}
		}
		
		protected void raisePreparing() {
			synchronized(FSMStatemachine.this) {
				preparing = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPreparingRaised();
				}
			}
		}
		
		private long price;
		
		public synchronized long getPrice() {
			synchronized(FSMStatemachine.this) {
				return price;
			}
		}
		
		public void setPrice(long value) {
			synchronized(FSMStatemachine.this) {
				this.price = value;
			}
		}
		
		private long money;
		
		public synchronized long getMoney() {
			synchronized(FSMStatemachine.this) {
				return money;
			}
		}
		
		public void setMoney(long value) {
			synchronized(FSMStatemachine.this) {
				this.money = value;
			}
		}
		
		protected void clearEvents() {
			b_Coffe = false;
			b_Expresso = false;
			b_Tea = false;
			s_Sugar = false;
			s_Size = false;
			s_Temp = false;
			c_050 = false;
			c_025 = false;
			c_010 = false;
			c_NFC = false;
			b_Cancel = false;
			cup_Taken = false;
		}
		protected void clearOutEvents() {
		
		onCancel = false;
		preparing = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		machine_Order,
		machine_Order_Select_Drink_select,
		machine_Order_Select_Drink_select_Selecting_Chosen,
		machine_Order_Select_Drink_select_Selecting_Waiting,
		machine_Order_Option_Waiting,
		machine_Order_Payment_Waiting,
		machine_Order_Time_Waiting,
		machine_Order_Time_Running,
		machine_Waiting,
		$NullState$
	};
	
	private final State[] stateVector = new State[4];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	private boolean startTimer;
	private boolean accept;
	public FSMStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setPrice(0);
		
		sCInterface.setMoney(0);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_Machine_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
				case machine_Order_Select_Drink_select_Selecting_Chosen:
					machine_Order_Select_Drink_select_Selecting_Chosen_react(true);
					break;
				case machine_Order_Select_Drink_select_Selecting_Waiting:
					machine_Order_Select_Drink_select_Selecting_Waiting_react(true);
					break;
				case machine_Order_Option_Waiting:
					machine_Order_Option_Waiting_react(true);
					break;
				case machine_Order_Payment_Waiting:
					machine_Order_Payment_Waiting_react(true);
					break;
				case machine_Order_Time_Waiting:
					machine_Order_Time_Waiting_react(true);
					break;
				case machine_Order_Time_Running:
					machine_Order_Time_Running_react(true);
					break;
				case machine_Waiting:
					machine_Waiting_react(true);
					break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!internalEventQueue.isEmpty()) {
			return internalEventQueue.poll();
		}
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_Machine();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$||stateVector[3] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		startTimer = false;
		accept = false;
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case machine_Order:
			return stateVector[0].ordinal() >= State.
					machine_Order.ordinal()&& stateVector[0].ordinal() <= State.machine_Order_Time_Running.ordinal();
		case machine_Order_Select_Drink_select:
			return stateVector[0].ordinal() >= State.
					machine_Order_Select_Drink_select.ordinal()&& stateVector[0].ordinal() <= State.machine_Order_Select_Drink_select_Selecting_Waiting.ordinal();
		case machine_Order_Select_Drink_select_Selecting_Chosen:
			return stateVector[0] == State.machine_Order_Select_Drink_select_Selecting_Chosen;
		case machine_Order_Select_Drink_select_Selecting_Waiting:
			return stateVector[0] == State.machine_Order_Select_Drink_select_Selecting_Waiting;
		case machine_Order_Option_Waiting:
			return stateVector[1] == State.machine_Order_Option_Waiting;
		case machine_Order_Payment_Waiting:
			return stateVector[2] == State.machine_Order_Payment_Waiting;
		case machine_Order_Time_Waiting:
			return stateVector[3] == State.machine_Order_Time_Waiting;
		case machine_Order_Time_Running:
			return stateVector[3] == State.machine_Order_Time_Running;
		case machine_Waiting:
			return stateVector[0] == State.machine_Waiting;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	private void raiseStartTimer() {
	
		internalEventQueue.add( new Runnable() {
			@Override public void run() {
				startTimer = true;					
				singleCycle();
			}
		});
	}
	
	private void raiseAccept() {
	
		internalEventQueue.add( new Runnable() {
			@Override public void run() {
				accept = true;					
				singleCycle();
			}
		});
	}
	
	public synchronized void raiseB_Coffe() {
		sCInterface.raiseB_Coffe();
	}
	
	public synchronized void raiseB_Expresso() {
		sCInterface.raiseB_Expresso();
	}
	
	public synchronized void raiseB_Tea() {
		sCInterface.raiseB_Tea();
	}
	
	public synchronized void raiseS_Sugar() {
		sCInterface.raiseS_Sugar();
	}
	
	public synchronized void raiseS_Size() {
		sCInterface.raiseS_Size();
	}
	
	public synchronized void raiseS_Temp() {
		sCInterface.raiseS_Temp();
	}
	
	public synchronized void raiseC_050() {
		sCInterface.raiseC_050();
	}
	
	public synchronized void raiseC_025() {
		sCInterface.raiseC_025();
	}
	
	public synchronized void raiseC_010() {
		sCInterface.raiseC_010();
	}
	
	public synchronized void raiseC_NFC() {
		sCInterface.raiseC_NFC();
	}
	
	public synchronized void raiseB_Cancel() {
		sCInterface.raiseB_Cancel();
	}
	
	public synchronized void raiseCup_Taken() {
		sCInterface.raiseCup_Taken();
	}
	
	public synchronized boolean isRaisedOnCancel() {
		return sCInterface.isRaisedOnCancel();
	}
	
	public synchronized boolean isRaisedPreparing() {
		return sCInterface.isRaisedPreparing();
	}
	
	public synchronized long getPrice() {
		return sCInterface.getPrice();
	}
	
	public synchronized void setPrice(long value) {
		sCInterface.setPrice(value);
	}
	
	public synchronized long getMoney() {
		return sCInterface.getMoney();
	}
	
	public synchronized void setMoney(long value) {
		sCInterface.setMoney(value);
	}
	
	/* Entry action for state 'Chosen'. */
	private void entryAction_Machine_Order_Select_Drink_select_Selecting_Chosen() {
		sCInterface.setPrice(sCInterface.operationCallback.newPrice());
		
		raiseAccept();
		
		raiseStartTimer();
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_Machine_Order_Select_Drink_select_Selecting_Waiting() {
		sCInterface.setMoney(0);
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_Machine_Order_Payment_Waiting() {
		raiseAccept();
	}
	
	/* Entry action for state 'Running'. */
	private void entryAction_Machine_Order_Time_Running() {
		timer.setTimer(this, 0, (10 * 1000), false);
	}
	
	/* Exit action for state 'Running'. */
	private void exitAction_Machine_Order_Time_Running() {
		timer.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state Order */
	private void enterSequence_Machine_Order_default() {
		enterSequence_Machine_Order_Select_default();
		enterSequence_Machine_Order_Option_default();
		enterSequence_Machine_Order_Payment_default();
		enterSequence_Machine_Order_Time_default();
	}
	
	/* 'default' enter sequence for state Drink_select */
	private void enterSequence_Machine_Order_Select_Drink_select_default() {
		enterSequence_Machine_Order_Select_Drink_select_Selecting_default();
	}
	
	/* 'default' enter sequence for state Chosen */
	private void enterSequence_Machine_Order_Select_Drink_select_Selecting_Chosen_default() {
		entryAction_Machine_Order_Select_Drink_select_Selecting_Chosen();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Order_Select_Drink_select_Selecting_Chosen;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Order_Select_Drink_select_Selecting_Waiting_default() {
		entryAction_Machine_Order_Select_Drink_select_Selecting_Waiting();
		nextStateIndex = 0;
		stateVector[0] = State.machine_Order_Select_Drink_select_Selecting_Waiting;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Order_Option_Waiting_default() {
		nextStateIndex = 1;
		stateVector[1] = State.machine_Order_Option_Waiting;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Order_Payment_Waiting_default() {
		entryAction_Machine_Order_Payment_Waiting();
		nextStateIndex = 2;
		stateVector[2] = State.machine_Order_Payment_Waiting;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Order_Time_Waiting_default() {
		nextStateIndex = 3;
		stateVector[3] = State.machine_Order_Time_Waiting;
	}
	
	/* 'default' enter sequence for state Running */
	private void enterSequence_Machine_Order_Time_Running_default() {
		entryAction_Machine_Order_Time_Running();
		nextStateIndex = 3;
		stateVector[3] = State.machine_Order_Time_Running;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Machine_Waiting_default() {
		nextStateIndex = 0;
		stateVector[0] = State.machine_Waiting;
	}
	
	/* 'default' enter sequence for region Machine */
	private void enterSequence_Machine_default() {
		react_Machine__entry_Default();
	}
	
	/* 'default' enter sequence for region Select */
	private void enterSequence_Machine_Order_Select_default() {
		react_Machine_Order_Select__entry_Default();
	}
	
	/* 'default' enter sequence for region Selecting */
	private void enterSequence_Machine_Order_Select_Drink_select_Selecting_default() {
		react_Machine_Order_Select_Drink_select_Selecting_default();
	}
	
	/* 'default' enter sequence for region Option */
	private void enterSequence_Machine_Order_Option_default() {
		react_Machine_Order_Option__entry_Default();
	}
	
	/* 'default' enter sequence for region Payment */
	private void enterSequence_Machine_Order_Payment_default() {
		react_Machine_Order_Payment__entry_Default();
	}
	
	/* 'default' enter sequence for region Time */
	private void enterSequence_Machine_Order_Time_default() {
		react_Machine_Order_Time__entry_Default();
	}
	
	/* Default exit sequence for state Order */
	private void exitSequence_Machine_Order() {
		exitSequence_Machine_Order_Select();
		exitSequence_Machine_Order_Option();
		exitSequence_Machine_Order_Payment();
		exitSequence_Machine_Order_Time();
	}
	
	/* Default exit sequence for state Chosen */
	private void exitSequence_Machine_Order_Select_Drink_select_Selecting_Chosen() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Order_Select_Drink_select_Selecting_Waiting() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Order_Option_Waiting() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Order_Payment_Waiting() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Order_Time_Waiting() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state Running */
	private void exitSequence_Machine_Order_Time_Running() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_Machine_Order_Time_Running();
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Machine_Waiting() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region Machine */
	private void exitSequence_Machine() {
		switch (stateVector[0]) {
		case machine_Order_Select_Drink_select_Selecting_Chosen:
			exitSequence_Machine_Order_Select_Drink_select_Selecting_Chosen();
			break;
		case machine_Order_Select_Drink_select_Selecting_Waiting:
			exitSequence_Machine_Order_Select_Drink_select_Selecting_Waiting();
			break;
		case machine_Waiting:
			exitSequence_Machine_Waiting();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case machine_Order_Option_Waiting:
			exitSequence_Machine_Order_Option_Waiting();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case machine_Order_Payment_Waiting:
			exitSequence_Machine_Order_Payment_Waiting();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case machine_Order_Time_Waiting:
			exitSequence_Machine_Order_Time_Waiting();
			break;
		case machine_Order_Time_Running:
			exitSequence_Machine_Order_Time_Running();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Select */
	private void exitSequence_Machine_Order_Select() {
		switch (stateVector[0]) {
		case machine_Order_Select_Drink_select_Selecting_Chosen:
			exitSequence_Machine_Order_Select_Drink_select_Selecting_Chosen();
			break;
		case machine_Order_Select_Drink_select_Selecting_Waiting:
			exitSequence_Machine_Order_Select_Drink_select_Selecting_Waiting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Option */
	private void exitSequence_Machine_Order_Option() {
		switch (stateVector[1]) {
		case machine_Order_Option_Waiting:
			exitSequence_Machine_Order_Option_Waiting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Payment */
	private void exitSequence_Machine_Order_Payment() {
		switch (stateVector[2]) {
		case machine_Order_Payment_Waiting:
			exitSequence_Machine_Order_Payment_Waiting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Time */
	private void exitSequence_Machine_Order_Time() {
		switch (stateVector[3]) {
		case machine_Order_Time_Waiting:
			exitSequence_Machine_Order_Time_Waiting();
			break;
		case machine_Order_Time_Running:
			exitSequence_Machine_Order_Time_Running();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine__entry_Default() {
		enterSequence_Machine_Order_default();
	}
	
	/* Default react sequence for initial entry default */
	private void react_Machine_Order_Select_Drink_select_Selecting_default() {
		enterSequence_Machine_Order_Select_Drink_select_Selecting_Waiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Order_Select__entry_Default() {
		enterSequence_Machine_Order_Select_Drink_select_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Order_Option__entry_Default() {
		enterSequence_Machine_Order_Option_Waiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Order_Payment__entry_Default() {
		enterSequence_Machine_Order_Payment_Waiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Machine_Order_Time__entry_Default() {
		enterSequence_Machine_Order_Time_Waiting_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean machine_Order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.b_Cancel) {
				exitSequence_Machine_Order();
				sCInterface.raiseOnCancel();
				
				enterSequence_Machine_Order_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean machine_Order_Select_Drink_select_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean machine_Order_Select_Drink_select_Selecting_Chosen_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.b_Coffe || (sCInterface.b_Expresso || sCInterface.b_Tea))) {
				exitSequence_Machine_Order_Select_Drink_select_Selecting_Chosen();
				enterSequence_Machine_Order_Select_Drink_select_Selecting_Chosen_default();
				machine_Order_Select_Drink_select_react(false);
			} else {
				if (((accept) && (sCInterface.getMoney()>=sCInterface.getPrice()))) {
					exitSequence_Machine_Order();
					sCInterface.raisePreparing();
					
					enterSequence_Machine_Waiting_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = machine_Order_Select_Drink_select_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Order_Select_Drink_select_Selecting_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.b_Coffe || (sCInterface.b_Expresso || sCInterface.b_Tea))) {
				exitSequence_Machine_Order_Select_Drink_select_Selecting_Waiting();
				enterSequence_Machine_Order_Select_Drink_select_Selecting_Chosen_default();
				machine_Order_Select_Drink_select_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Order_Select_Drink_select_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Order_Option_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.s_Sugar || (sCInterface.s_Size || sCInterface.s_Temp))) {
				exitSequence_Machine_Order_Option_Waiting();
				raiseStartTimer();
				
				enterSequence_Machine_Order_Option_Waiting_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean machine_Order_Payment_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.c_050 || (sCInterface.c_025 || (sCInterface.c_010 || sCInterface.c_NFC)))) {
				exitSequence_Machine_Order_Payment_Waiting();
				raiseStartTimer();
				
				sCInterface.setMoney(sCInterface.operationCallback.currentMoney());
				
				enterSequence_Machine_Order_Payment_Waiting_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean machine_Order_Time_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (startTimer) {
				exitSequence_Machine_Order_Time_Waiting();
				enterSequence_Machine_Order_Time_Running_default();
				machine_Order_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = machine_Order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Order_Time_Running_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (startTimer) {
				exitSequence_Machine_Order_Time_Running();
				enterSequence_Machine_Order_Time_Running_default();
				machine_Order_react(false);
			} else {
				if (timeEvents[0]) {
					exitSequence_Machine_Order();
					sCInterface.raiseOnCancel();
					
					enterSequence_Machine_Order_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = machine_Order_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean machine_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cup_Taken) {
				exitSequence_Machine_Waiting();
				sCInterface.raiseOnCancel();
				
				enterSequence_Machine_Order_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
